#!/usr/bin/env node

/**
 * Migration Script - Move existing packages into ui-platform
 * 
 * This script MOVES (not copies) the existing ui-components and ui-components-react
 * packages into the new platform structure as workspace packages.
 * 
 * IMPORTANT: This is a one-way migration that moves source code only.
 */

import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const platformRoot = path.join(__dirname, '..');
const parentDir = path.join(platformRoot, '..');

// Check for dry-run mode
const isDryRun = process.argv.includes('--dry-run');

async function migratePackages() {
  console.log('üöÄ Starting UI Platform migration...\n');
  
  if (isDryRun) {
    console.log('üîç DRY RUN MODE - No files will be moved\n');
  } else {
    console.log('‚ö†Ô∏è  WARNING: This is a ONE-WAY migration that MOVES (not copies) packages.');
    console.log('   Source directories will be cleaned up after successful migration.');
    console.log('   Make sure you have backups if needed.');
    console.log('   Use --dry-run flag to preview changes without making them.\n');
  }
  
  try {
    // Define source and destination paths
    const packages = [
      {
        name: 'ui-components',
        source: path.join(parentDir, 'ui-components'),
        dest: path.join(platformRoot, 'packages', 'ui-components')
      },
      {
        name: 'ui-components-react',
        source: path.join(parentDir, 'ui-components-react'),
        dest: path.join(platformRoot, 'packages', 'ui-components-react')
      }
    ];

    // Check if source packages exist
    for (const pkg of packages) {
      if (!await fs.pathExists(pkg.source)) {
        console.log(`‚ö†Ô∏è  Source package not found: ${pkg.source}`);
        console.log(`   Skipping ${pkg.name}...`);
        continue;
      }

      console.log(`üì¶ ${isDryRun ? 'Would migrate' : 'Migrating'} ${pkg.name}...`);
      
      if (!isDryRun) {
        // Create destination directory
        await fs.ensureDir(pkg.dest);
        
        // Move package contents (excluding build artifacts and dependencies)
        await movePackageContents(pkg.source, pkg.dest);
        
        // Update package.json to be workspace-compatible
        await updatePackageJson(pkg.dest, pkg.name);
        
        // Clean up original directory after successful migration
        await cleanupOriginalDirectory(pkg.source, pkg.name);
      } else {
        // Dry run - just show what would be moved
        await previewMigration(pkg.source, pkg.dest);
      }
      
      console.log(`‚úÖ ${pkg.name} ${isDryRun ? 'preview completed' : 'migrated successfully'}`);
    }

    // Update platform package.json references
    await updatePlatformReferences();
    
    console.log('\n‚ú® Migration completed successfully!');
    console.log('\nüìã Next steps:');
    console.log('1. cd ui-platform');
    console.log('2. npm install');
    console.log('3. npm run build');
    console.log('4. npm run test');
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  }
}

/**
 * Preview what would be migrated (dry run)
 */
async function previewMigration(sourcePath, destPath) {
  console.log(`   Preview: ${sourcePath} ‚Üí ${destPath}`);
  
  const excludePatterns = [
    'node_modules', 'dist', 'build', '.npm', '.cache', '.yarn',
    'coverage', '.nyc_output', 'storybook-static', 'tmp', 'temp',
    '.DS_Store', 'Thumbs.db', '*.log', '.vscode', '.idea', '*.swp', '*.swo',
    '.env', '.env.local'
  ];

  const items = await fs.readdir(sourcePath, { withFileTypes: true });
  
  console.log('   Files/folders that would be moved:');
  for (const item of items) {
    const shouldExclude = excludePatterns.some(pattern => {
      if (pattern.includes('*')) {
        const regex = new RegExp(pattern.replace('*', '.*'));
        return regex.test(item.name);
      }
      return item.name === pattern || item.name.startsWith(pattern);
    });
    
    if (!shouldExclude) {
      console.log(`     ‚úÖ ${item.name} ${item.isDirectory() ? '(directory)' : '(file)'}`);
    } else {
      console.log(`     ‚ùå ${item.name} (excluded)`);
    }
  }
}

/**
 * Move package contents excluding build artifacts and dependencies
 */
async function movePackageContents(sourcePath, destPath) {
  console.log(`   Moving source files...`);
  
  // Define what to exclude (build artifacts, dependencies, temp files)
  const excludePatterns = [
    // Dependencies (will be managed by workspace)
    'node_modules',
    
    // Build artifacts (will be regenerated by platform)
    'dist',
    'build',
    'coverage',
    '.nyc_output',
    'storybook-static',
    '.storybook-out',
    
    // Package manager caches
    '.npm',
    '.cache',
    '.yarn',
    
    // Temporary files
    'tmp',
    'temp',
    
    // OS files
    '.DS_Store',
    'Thumbs.db',
    
    // Logs
    '*.log',
    'npm-debug.log*',
    'yarn-debug.log*',
    'yarn-error.log*',
    
    // IDE files (personal preference - could be kept)
    '.vscode',
    '.idea',
    '*.swp',
    '*.swo',
    
    // Environment files (security)
    '.env',
    '.env.local',
    '.env.*.local'
  ];

  // Get all items in source directory
  const items = await fs.readdir(sourcePath, { withFileTypes: true });
  
  for (const item of items) {
    const sourceName = item.name;
    const sourceItemPath = path.join(sourcePath, sourceName);
    const destItemPath = path.join(destPath, sourceName);
    
    // Check if item should be excluded
    const shouldExclude = excludePatterns.some(pattern => {
      if (pattern.includes('*')) {
        // Handle glob patterns
        const regex = new RegExp(pattern.replace('*', '.*'));
        return regex.test(sourceName);
      }
      return sourceName === pattern || sourceName.startsWith(pattern);
    });
    
    if (shouldExclude) {
      console.log(`   Skipping: ${sourceName}`);
      continue;
    }
    
    try {
      // Move the item
      await fs.move(sourceItemPath, destItemPath, { overwrite: true });
      console.log(`   Moved: ${sourceName}`);
    } catch (error) {
      console.warn(`   Warning: Could not move ${sourceName}:`, error.message);
    }
  }
}

/**
 * Clean up original directory after successful migration
 */
async function cleanupOriginalDirectory(sourcePath, packageName) {
  console.log(`   Cleaning up original ${packageName} directory...`);
  
  try {
    // Check if directory is now empty or only contains excluded items
    const remainingItems = await fs.readdir(sourcePath);
    const excludePatterns = ['node_modules', 'dist', 'build', '.git', '.cache'];
    
    const importantRemaining = remainingItems.filter(item => 
      !excludePatterns.some(pattern => item.startsWith(pattern))
    );
    
    if (importantRemaining.length === 0) {
      // Safe to remove - only build artifacts remain
      await fs.remove(sourcePath);
      console.log(`   ‚úÖ Removed original ${packageName} directory`);
    } else {
      console.log(`   ‚ö†Ô∏è  Original directory kept (contains: ${importantRemaining.join(', ')})`);
      
      // Create a marker file to indicate migration
      const markerPath = path.join(sourcePath, 'MIGRATED_TO_UI_PLATFORM.md');
      const markerContent = `# Package Migrated

This package has been migrated to: \`ui-platform/packages/${packageName}\`

Date: ${new Date().toISOString()}

The source code is now managed within the UI Platform workspace.
`;
      await fs.writeFile(markerPath, markerContent);
    }
  } catch (error) {
    console.warn(`   Warning: Could not clean up ${sourcePath}:`, error.message);
  }
}

async function updatePackageJson(packagePath, packageName) {
  const packageJsonPath = path.join(packagePath, 'package.json');
  
  if (!await fs.pathExists(packageJsonPath)) {
    console.log(`   No package.json found in ${packagePath}`);
    return;
  }
  
  const packageJson = await fs.readJson(packageJsonPath);
  
  // Update for workspace compatibility
  if (packageName === 'ui-components') {
    packageJson.name = '@tamyla/ui-components';
    packageJson.publishConfig = {
      access: 'public',
      directory: 'dist'
    };
  } else if (packageName === 'ui-components-react') {
    packageJson.name = '@tamyla/ui-components-react';
    packageJson.publishConfig = {
      access: 'public',
      directory: 'dist'
    };
    
    // Update dependency to workspace reference
    if (packageJson.dependencies && packageJson.dependencies['@tamyla/ui-components']) {
      packageJson.dependencies['@tamyla/ui-components'] = 'workspace:*';
    }
  }
  
  // Add workspace-specific scripts
  packageJson.scripts = {
    ...packageJson.scripts,
    'build:clean': 'rimraf dist',
    'build:types': 'tsc --emitDeclarationOnly',
    'prepack': 'npm run build'
  };
  
  await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });
  console.log(`   Updated package.json for ${packageName}`);
}

async function updatePlatformReferences() {
  console.log('\nüîß Updating platform references...');
  
  const platformPackageJsonPath = path.join(platformRoot, 'package.json');
  const platformPackageJson = await fs.readJson(platformPackageJsonPath);
  
  // Ensure workspace dependencies are properly configured
  platformPackageJson.dependencies = {
    ...platformPackageJson.dependencies,
    '@tamyla/ui-components': 'workspace:*',
    '@tamyla/ui-components-react': 'workspace:*'
  };
  
  await fs.writeJson(platformPackageJsonPath, platformPackageJson, { spaces: 2 });
  console.log('   Updated platform package.json dependencies');
}

// Create migration status file
async function createMigrationStatus() {
  const statusFile = path.join(platformRoot, 'MIGRATION_STATUS.md');
  const status = `# Migration Status

## ‚úÖ Migration Completed

Date: ${new Date().toISOString()}

### Packages Migrated (MOVED - Not Copied)
- ‚úÖ @tamyla/ui-components ‚Üí packages/ui-components
- ‚úÖ @tamyla/ui-components-react ‚Üí packages/ui-components-react

### Migration Approach
- **MOVED** source code (no duplication)
- **EXCLUDED** build artifacts (node_modules, dist, .git)
- **PRESERVED** all source files and configurations
- **NO** legacy symlinks created (not needed)

### Workspace Configuration
- Updated package.json for workspace compatibility
- Added workspace-specific scripts
- Updated inter-package dependencies

### Next Steps
1. Install dependencies: \`npm install\`
2. Build packages: \`npm run build\`
3. Run tests: \`npm run test\`
4. Publish from platform: \`npm run publish:all\`

### Breaking Changes
None - packages maintain full functional compatibility

### Original Directories
Original directories cleaned up automatically after successful migration.
If any important files remained, a marker file was created.

### Migration Script
This migration was performed by: \`scripts/migrate-packages.js\`
`;

  await fs.writeFile(statusFile, status);
  console.log('   Created migration status file');
}

// Run migration (only when script is executed directly)
const isMainModule = import.meta.url === `file://${process.argv[1]}` || 
                    process.argv[1].endsWith('migrate-packages.js');

if (isMainModule) {
  console.log('üîß Migration script starting...');
  
  if (!isDryRun) {
    migratePackages()
      .then(() => createMigrationStatus())
      .catch(console.error);
  } else {
    migratePackages()
      .catch(console.error);
  }
}
